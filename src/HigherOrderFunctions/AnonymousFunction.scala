package HigherOrderFunctions

/**
 * Project Euler problem2:
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */
object AnonymousFunction {

  /**
   * Long Java styled solution to show anonymous function that has no parameters
   */
  val fibonacci = () => {
    var sum = 0
    def loop(prev: Int, current: Int): Int = {
      if(current > 4000000)
        return sum
      else if (current % 2 == 0)
        sum+=current
      loop(current, current + prev)
    }
    loop(1, 1)
  }

  val result = fibonacci()

  /**
   * And super short and fancy Scala solution with streams
   */
  val fibonacciStream: Stream[Int] = 0 #:: fibonacciStream.scanLeft(1)(_ + _)
  val result2 = fibonacciStream.filter( _ % 2 == 0).takeWhile( _ <= 4000000).sum

  //Answer:4613732
}
